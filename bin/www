#!/usr/bin/env node

// Module dependencies
require('dotenv').config();
const app = require('../app');
const debug = require('debug')('findmyappetite:server');
const models = require('../models');
const server = require('http').createServer(app);

// Normalize a port into a number, string, or false
const normalizePort = val => {
    let port = parseInt(val, 10);

    // named pipe
    if (isNaN(port)) return val;

    // port number
    if (port >= 0) return port;

    return false;
}

// Event listener for HTTP server "error" event
const onError = error => {
    if (error.syscall !== 'listen') throw error;

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

// Event listener for HTTP server "listening" event.
const onListening = () => {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

// Get port from environment and store in Express
let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server
const startServer = () => {
    server.listen(port, () => {
        debug('Express server listening on port ' + server.address().port);
    });
};

// Sync with SQL database, then listen on provided
// port on all network interfaces
models.sql.sequelize.sync().then(() => {
    // Populate test data in development or testing enviornment
    if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')
        models.mongo.populateTestData();
    startServer();
    // /*else*/ startServer();
    server.on('error', onError);
    server.on('listening', onListening);
});
